import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Logger;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.cggh.tools.dataMerger.files.filebases.FilebaseModel;
import org.cggh.tools.dataMerger.scripts.files.filebases.FilebaseScripts;
public class GeneratedClass {
public static void trace(HttpServletRequest var0, HttpServletResponse var1) throws Throwable {
    String[] var5 = var0.getHeader("Accept").split(",");
    List var6 = Arrays.asList(var5);
    if (var6.contains("text/plain")) {
        var1.setContentType("text/plain");
        ServletContext var11 = var0.getSession().getServletContext();
        Object var12 = new Object();
        var12 = new Object();
        var12 = new Object();
        String var22 = var11.getInitParameter("fileRepositoryBasePath");
        var12 = new Object();
        String var23 = var11.getInitParameter("fileRepositoryInstallationLogPathRelativeToRepositoryBasePath");
        var12 = new Object();
        var12 = new Object();
        File var10000 = new File(var22);
        File var62 = var10000;
        if (var62.exists()) return;
        var12 = new Object();
        if (var62.canWrite()) return;
        var12 = new Object();
        if (var62.canRead()) {
            Boolean var27 = Boolean.valueOf(true);
            var12 = new Object();
            String[] var29 = var62.list();
            int var30 = 0;
            if (var30 < var29.length) { {}
}
            var12 = new Object();
            var12 = new Object();
            String var46;
            if (var27.booleanValue()) {
                StringBuilder var10002 = new StringBuilder();
                var12 = new Object();
                var10002 = var10002.append(var22);
                var12 = new Object();
                String var59 = var10002.append(var23).toString();
                FileInputStream var53 = new FileInputStream(var59);
                FileInputStream var64 = var53;
                DataInputStream var54 = new DataInputStream(var64);
                DataInputStream var65 = var54;
                InputStreamReader var55 = new InputStreamReader(var65);
                InputStreamReader var66 = var55;
                BufferedReader var56 = new BufferedReader(var66);
                BufferedReader var67 = var56;
                String var38 = var67.readLine();
                if (var38 == null) { {}
}
                String[] var39 = var38.split(",");
                HashMap var57 = new HashMap();
                HashMap var68 = var57;
                String var41 = null;
                if ((var41 = var67.readLine()) != null) {
                    String[] var42 = var41.split(",");
                    int var43 = 0;
                    if (var43 < var39.length) {
                        var68.put(var39[var43], var42[var43]);
                    }
                }
                StringBuilder var58 = new StringBuilder();
                var46 = var58.append((String) var68.get("major_version_number")).append(".").append((String) var68.get("minor_version_number")).append(".").append((String) var68.get("revision_version_number")).toString();
                var12 = new Object();
            }
            var46 = System.getProperty("os.name").toLowerCase();
            if (var46.indexOf("nix") >= 0 || var46.indexOf("nux") >= 0) {
                var12 = new Object();
                var12 = new Object();
                FilebaseScripts var60 = new FilebaseScripts();
                FilebaseScripts var69 = var60;
                String var51 = var69.deleteFilebaseUsingFilebaseModel((FilebaseModel) var12);
                PrintWriter var61 = var1.getWriter();
                var61.print(var51);
            }
        }
    }
}

}