import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Logger;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.cggh.tools.dataMerger.files.filebases.FilebaseModel;
import org.cggh.tools.dataMerger.scripts.files.filebases.FilebaseScripts;
public class GeneratedClass {
public static void trace(HttpServletRequest var0, HttpServletResponse var1) throws Throwable {
    String[] var5 = var0.getHeader("Accept").split(",");
    List var6 = Arrays.asList(var5);
    if (var6.contains("text/plain")) {
        var1.setContentType("text/plain");
        ServletContext var11 = var0.getSession().getServletContext();
        Object var12 = new Object();
        var12 = new Object();
        var12 = new Object();
        String var22 = var11.getInitParameter("fileRepositoryBasePath");
        var12 = new Object();
        String var23 = var11.getInitParameter("fileRepositoryInstallationLogPathRelativeToRepositoryBasePath");
        var12 = new Object();
        var12 = new Object();
        File var10000 = new File(var22);
        File var60 = var10000;
        if (var60.exists()) {
            var12 = new Object();
            if (var60.canWrite()) return;
            var12 = new Object();
            if (var60.canRead()) {
                Boolean var27 = Boolean.valueOf(true);
                var12 = new Object();
                String[] var29 = var60.list();
                int var30 = 0;
                if (var30 < var29.length) { {}
}
                var12 = new Object();
                var12 = new Object();
                String var44;
                if (var27.booleanValue()) {
                    StringBuilder var10002 = new StringBuilder();
                    var12 = new Object();
                    var10002 = var10002.append(var22);
                    var12 = new Object();
                    String var57 = var10002.append(var23).toString();
                    FileInputStream var51 = new FileInputStream(var57);
                    FileInputStream var62 = var51;
                    DataInputStream var52 = new DataInputStream(var62);
                    DataInputStream var63 = var52;
                    InputStreamReader var53 = new InputStreamReader(var63);
                    InputStreamReader var64 = var53;
                    BufferedReader var54 = new BufferedReader(var64);
                    BufferedReader var65 = var54;
                    String var38 = var65.readLine();
                    if (var38 == null) { {}
}
                    HashMap var55 = new HashMap();
                    HashMap var66 = var55;
                    StringBuilder var56 = new StringBuilder();
                    var44 = var56.append((String) var66.get("major_version_number")).append(".").append((String) var66.get("minor_version_number")).append(".").append((String) var66.get("revision_version_number")).toString();
                    var12 = new Object();
                }
                var44 = System.getProperty("os.name").toLowerCase();
                if (var44.indexOf("nix") < 0) {
                    if (var44.indexOf("nux") >= 0) return;
                    if (var44.indexOf("mac") >= 0) {
                        var12 = new Object();
                        var12 = new Object();
                        FilebaseScripts var58 = new FilebaseScripts();
                        FilebaseScripts var67 = var58;
                        String var49 = var67.deleteFilebaseUsingFilebaseModel((FilebaseModel) var12);
                        PrintWriter var59 = var1.getWriter();
                        var59.print(var49);
                    }
                }
            }
        }
    }
}

}